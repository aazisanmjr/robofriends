{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constant.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","city","className","alt","src","CardList","robots","map","user","i","key","address","geo","lng","SearchBox","searchchange","type","placeholder","onChange","Scroll","prop","style","overflowY","borderTop","height","children","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","fillteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","erorr","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStatesearchRobots","initialStateRequestRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b8c0709f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id,city}) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='roof' src={`https://robohash.org/${id}?200*200`}/>\t\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t<p>{city}</p>\r\n\t\t</div>\t\t\t\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n}\t\t\t\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\nconst CardList = ({robots}) =>{\r\n    return (\r\n        <div>\r\n           {\r\n            robots.map((user, i) => {\r\n                return ( <\r\n                    Card \r\n                    key = {i}\r\n                    id = {\r\n                        robots[i].id\r\n                    }\r\n                    name = {\r\n                        robots[i].name\r\n                    }\r\n                    email = {\r\n                        robots[i].email\r\n                    }\r\n                    city = {\r\n                        robots[i].address.geo.lng\r\n                    }\r\n                    />\r\n                )\r\n            })\r\n           }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchchange})=> {\r\n    return(\r\n        < div className= 'pa2' >\r\n            <input \r\n            className= 'pa3 ba bg-light-pink b--light-red'\r\n            type='search'\r\n            placeholder='Search Robot'\r\n            onChange={searchchange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n \r\nconst Scroll =(prop)=>{\r\n    return <div style={{overflowY:'scroll', borderTop:'5px solid #FFA3D7',height:'80vh'}}>{prop.children}</div>;\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError : false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n      if(this.state.hasError){\r\n         return <h1>Opps....Something is wrong</h1>\r\n        }\r\n        return this.props.children;\r\n    }    \r\n}\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {  setSearchField, requestRobots  } from '../actions';\r\nimport './App.css';\r\nconst mapStateToProps = state =>{\r\n  return{\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    erorr: state.requestRobots.erorr\r\n  }\r\n} \r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return{\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n}\r\n}\r\nclass App extends Component{\r\n    componentDidMount(){\r\n        this.props.onRequestRobots()\r\n    };\r\n    render(){\r\n        const {searchField, onSearchChange, robots ,isPending}=this.props;\r\n        const fillteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ? (\r\n          <div id=\"loader\">\r\n            <div className=\"loading\">\r\n              <div className=\"dot\"></div>\r\n              <div className=\"dot\"></div>\r\n              <div className=\"dot\"></div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"tc\">\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            <SearchBox searchchange={onSearchChange} />\r\n            <Scroll>\r\n              <ErrorBoundry>\r\n                <CardList robots={fillteredRobots} />\r\n              </ErrorBoundry>\r\n            </Scroll>\r\n          </div>\r\n        );\r\n    };\r\n    \r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constant';\r\nexport const setSearchField = (text)=>{\r\n    return {\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n}};\r\nexport const requestRobots = ()=> (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n    .catch(erorr =>dispatch({type:REQUEST_ROBOTS_FAILED, payload:erorr}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { CHANGE_SEARCH_FIELD, \r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n    } from './constant';\r\n\r\nconst initialStatesearchRobots = {\r\n    searchField:''\r\n}\r\nexport const searchRobots = (state = initialStatesearchRobots, action={})=>{\r\n    switch (action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{ searchField:action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nconst initialStateRequestRobots= {\r\n    isPending: false,\r\n    robots:[],\r\n    erorr:''\r\n}\r\nexport const requestRobots = (state = initialStateRequestRobots, action={}) =>{\r\n    switch (action.type){\r\n        case REQUEST_ROBOTS_PENDING :\r\n            return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n            return Object.assign({},state,{isPending:false,robots:action.payload});\r\n        case REQUEST_ROBOTS_FAILED :\r\n            return Object.assign({},state,{erorr:action.payload})\r\n        default :\r\n        return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nimport {searchRobots , requestRobots} from './reducer';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n \nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/> \n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}