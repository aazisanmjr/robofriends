{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","prop","style","overflowY","borderTop","height","children","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","fillteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCLSC,EAXF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACzB,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,cACpB,6BACA,4BAAKF,GACL,2BAAIC,MCkBSK,EAxBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAS,kBACL,EADK,CAELC,IAAOD,EACPR,GACIK,EAAOG,GAAGR,GAEdF,KACIO,EAAOG,GAAGV,KAEdC,MACIM,EAAOG,GAAGT,aCFnBW,EAbC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACd,OACI,yBAAMV,UAAW,OACb,2BACAA,UAAW,oCACXW,KAAK,SACLC,YAAY,eACZC,SAAUH,MCJPI,EAHD,SAACC,GACX,OAAO,yBAAKC,MAAO,CAACC,UAAU,SAAUC,UAAU,oBAAoBC,OAAO,UAAWJ,EAAKK,WCgBlFC,E,kDAhBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACRC,UAAW,GAHD,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAG1B,OAAGG,KAAKJ,MAAMC,SACJ,0DAEDG,KAAKL,MAAMF,a,GAdCS,aC6CZC,G,wDAtCX,aAAc,IAAD,8BACT,gBAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAfzC,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAY,IAJP,E,gEAOO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAElBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAMtB,IAAD,EAC0Bb,KAAKJ,MAA5BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACTQ,EAAkBrC,EAAOsC,QAAO,SAAAC,GAClC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQxC,EAAO0C,OAEf,yBAAK9C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,OANtB,2C,GA1BUZ,cCDlBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAE,EAAF,OAEAC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.f69cd379.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='roof' src={`https://robohash.org/${id}?200*200`}/>\t\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\t\t\t\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n}\t\t\t\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\nconst CardList = ({robots}) =>{\r\n    return (\r\n        <div>\r\n           {\r\n            robots.map((user, i) => {\r\n                return ( <\r\n                    Card \r\n                    key = {i}\r\n                    id = {\r\n                        robots[i].id\r\n                    }\r\n                    name = {\r\n                        robots[i].name\r\n                    }\r\n                    email = {\r\n                        robots[i].email\r\n                    }\r\n                    />\r\n                )\r\n            })\r\n           }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchchange})=> {\r\n    return(\r\n        < div className= 'pa2' >\r\n            <input \r\n            className= 'pa3 ba bg-light-pink b--light-red'\r\n            type='search'\r\n            placeholder='Search Robot'\r\n            onChange={searchchange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n \r\nconst Scroll =(prop)=>{\r\n    return <div style={{overflowY:'scroll', borderTop:'5px solid #FFA3D7',height:'100vh'}}>{prop.children}</div>;\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError : false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n      if(this.state.hasError){\r\n         return <h1>Opps....Something is wrong</h1>\r\n        }\r\n        return this.props.children;\r\n    }    \r\n}\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n           return response.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({robots: users})\r\n    })\r\n    };\r\n    onSearchChange = (event)=> {\r\n        this.setState({searchfield: event.target.value})\r\n    }; \r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const fillteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchchange={this.onSearchChange}/>\r\n        <Scroll >\r\n        <ErrorBoundry>\r\n            <CardList robots={fillteredRobots}/> \r\n        </ErrorBoundry>\r\n        </Scroll>  \r\n        </div>\r\n    };\r\n    \r\n};\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n  < App/>   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}